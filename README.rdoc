-- Rap Review App --

The Rap Review app allows users to rate and review albums as objectively as possible by allowing them to rate each song from an artist by album or mixtape.  The app then aggregates an average score of the album based on the totality of ratings of their songs.  Then each album/mixtape rating is aggregated to create an overall score for the artist.

8/17/16 - Things to Focus On
-----------------------------
1. Finish Artist Controller/Test - Completed
2. Paperclip Gem - Completed
3. Begin Album Controller/Test - Started

-- Notes --
* When writing out test for the delete method, be sure to use before instead of let.  Apparently, let lazily loads up the variable, not loading it until you actually call on it in a test.  Yet, with you're trying to delete something from the database, the query should already be in the database, which is why you would want to use before.  Before actually creates the variable and when it's called upon in the test, the test is actually querying it from the database which is to the advantage of the 'DELETE destroy' test because it can actually grab something from the database and remove it.

* When dealing with nested resources it's best to use the 'shallow nesting' feature which takes out the wordy-ness of nested URLs.  Looks like it focuses on using the names of both resources only on the index, create, and new paths.  If I'm thinking about the logic correctly, then it's only focusing on the index because it wants to make sure all the objects nested under the parent are available.  While, the only time it's important to have the parent id attached to a new instance of the child is when you're creating it.  Once it's logged into the database you don't have to worry about changing.

* Using Jamis Buck's idea on practical deep nesting to avoid breaking his "Resouces should never be nested more than one level deep" rule.  This rule will help maintain the codebase of the app in the long run. Made a few alterations to clean-up the routes. Should routes be nested more than one level deep?

* Ran into an issue running the test on the albums because of it's association with artist.  First I had to test the index to make sure it was properly assigning the artist to the instance variable.  Once this test was passed I focused on making sure the @albums variable was properly assigned based on the artist id.  The test failed several times before I made some changes to the factories explicitly stating the id for the artist and the artist_id for the album.  This will help greatly for understanding how to test the rest of the controller and for future test on the Songs Controller since it also deals with association.  Testing controllers with associations suck!

-----------------------------


8/18/16 - Things to Focus On
-----------------------------
1. Album Controller/Test - Unfinished
2. Begin Song Controller/Test - Didn't Start

-- Notes --
* Worked on the "GET show" and I ran into some issues trying to get the test and the controller right.  Because I'm using the shallow nesting feature on my routes there was some confusion on my end as to if I should still find the artist by id first and then find the albums through the artist or if I could just find the albums by the album id.  When I run rake routes it shows me that I can link to the show action of the album without placing the artist param first.  In the controller I called the album without having to locate the artist but in the controller test I have to call the artist_id first.  I'm assuming this is because of the associations that the test is picking on the album.  The warning seemed to indicate that a artist_id was needed in order to properly find the album.  I wonder does RSpec recognize shallow nesting or does that feature get overridden?

------------------------------


8/19/16 - Focus Points
--------------------------
1. Finish Album Controller/Test - Finished
2. Begin Song Controller/Test - Starting Next

-- Notes --
* The rest of the test went smooth for the most part.  Ran into a lot of errors that were familiar from the first controller test.  Because many of my issues were already documented I just troubleshooted the problems with old solutions and things seemed to workout fine.  The note about the delete method test came in handy the most.  Granted, when testing a controller dealing with associations, I had to pass in more specific arguments/params in order for the test to pick them up properly.  Also, the shallow nesting feature can cause a few headaches while testing so it's probably best to keep a screen up that shows you all of your routes so you can have a better idea of the args you may need to pass in.

--------------------------------


8/20/16 - Focus Points
---------------------------
1. Begin Song Controller/Test - Complete
2. Add Pry to Workflow - Complete
3. Begin User Test - Unfinished

-- Notes --
* Testing the new method in the song controller brings up an interesting instance.  I've tested two different ways of building a new instance of 'Song'.  One, using '@song = Song.new', the other being '@song = @album.songs.buid'.  Both pass.  I'm sure this has a lot to do with the way my routes are set-up.  I have my routes nested with one outlier (resources :songs) that I believe has more to do with why both test pass than anything.  I do want a song resource on it's own because there are some songs that may not have albums attached to them but have a artist attached to them.  I will have to pay close attention to how this issue may affect the app's development in the future in regards to how songs are being saved to the database.

* Funky bug in the songs model test & factory.  After adding the artist_id and album_id into the songs factory, the test for being a valid factory no longer passes.  I don't understand why is it that the test fails because of this small detail.  It's definitely something I'm going to have to snoop around for.

--------------------------------


8/21/16 - Focus Points
--------------------------
1. Begin User Test - Unfinished
2. User State? - Unfinished

-- Notes --
* Today hasn't been much of a coding day because I've been doing a some research on user states.  I'm thinking about how I'm going to implement them into my app, also, I'm thinking about about what kinds of users will be using the site.  There will be guest, members, and admins definitely.  Mapping them out and the user states will be the priority now.  Once I do that I can go in and change the test I need to change according to how I want the controller to deal with each user and what they will have access to do.  Once this is done I will begin working on the views portion of the app.  Once I have all of this figured out I will begin end to end test to make sure everything is working just fine before beginning to implement Angular into the app.

----------------------------------


8/22/16 - Focus Points
---------------------------
1. User Roles/States - DS (Didn't Start)
2. Begin User Test - DS

-- Notes --
* To help define user roles I will use Pundit over the CanCanCan gem.  Despite the overwhelming support CanCan has, the further I researched about the gem the more I learned about how much of a mess it can become as a app grows larger since the app defines all of the user roles in one class.  Pundit, however, uses separate classes, can be written in plain ruby, and doesn't add a bunch of complicated DSL. I'm not clear on the instructions so I'm going to build out the views and play around with the gem a little bit before I continue to build out the app.  So now my focus revert to building the views.

-------------------------------


8/23/16 - Focus Points
---------------------------
1. User Roles/States - Will Begin After User Testing
2. Begin User Test - Began

-- Notes --
* Figured out how to make my album test pass after they started failing.  Apparently, I have to use the build method when I'm testing validation of a factory.  While using 'create' works just fine when I test for data.  This had to do with the order ActiveRecord decides to validate the params of a new instance.

* While doing some research on establishing user roles/authorization I stumbled upon 'has_many/through' associations.  This association allows a user to set-up "shortcuts" through nested has_many associations.  So now instead of me having to call the album then call the song from the album, I can call the song directly on the associated artist.  To be clear, right now I have a Artist who has many albums and many songs, an Album that belongs to Artist but has many songs, and a Song class who belongs to Artist and Album.  Normally, I would find the Artist, then the Album, then the Song.  But once I set the has_many :songs, through: :albums I can skip finding the album and just call the song on Artist like...

@artist = Artist.find(params[:artist_id])
@song = @artist.songs.find(params[:id])

...which is going to clean up my songs controller and make it a lot less confusing to read.  With the 'has_many/through' association ActiveRecord will know it needs to find the parent/child through a third table.

* When testing the User sign in page, take note of how using 'new' versus 'create' gives different results.  Appears that the sign-in will recognize any user that is 'created' as registered since it insinuates the user has already registered, hence, it assumes the user is saved to the database (only happens if everything is validated).  Whereas, using the 'new' method to will tell the test the user isn't registered (since their info has not been saved to the database) therefore this user info is invalid to sign in.

------------------------------------


8/26/16 - Focus Points
---------------------------
1. Continue User Test - Index permissions
2. User Roles - Mapped out

-- Notes --
* Installed the 'spring' gem so that my app can stay running in the background to speed up my test.  This is going to be more helpful for all of the feature test I will will now be working on.

* I'm going to get rid of the guest option from the roles and just focus on the guest and admin, preferably the admin.  User test will be written to test the admin and member roles from the outside in.  I'm going to build out a users index page only accessible for the admin.  This will allow me to maintain roles of users and down the line develop a page which will allow me to keep up with user state.

* Took me awhile (around 4 hours) but I finally figured out how to test my User Policy in RSpec.  I ran into a lot of issues with how to set the test up, mainly the syntax, and it's pretty straight-forward.  Instead of using context/describe Pundit requires 'permissions {action}?' in order to properly test the actions.  The way people have shown to test Pundit has me questioning if they made any changes to their environment?  Now I'm going to TDD my User Policy to build out the user roles and the controllers that will be associated with them.  I will have to make some changes to the the Artist/Album/Song controllers but once I've finished testing the Users, the roles and updating the controllers I'll be able to build out the views and test more features.

--------------------------------------


8/27/16 - Focus Points
-----------------------------
1. - User Policy Test - Completed Artist Controller Authorization

-- Notes --
* So there are times when testing the Policy model when you need to pass two arguments.  If this is the case, the first argument represents the current user and the second argument should represent the trait/attribute/role you want to pass in.  I'm not completely sure about this but I'm assuming this is how testing pundit works.  I'm going to have to experiment with it more when I test other controllers.  With more test I'll be able to narrow exactly what the second argument exactly should be.

* For the artist controller I tested the guest, member, and admin access just to make sure every thing tested the way I wanted.  From not on I will assume if the guest has access to a page then any user with a higher level access can get to the page.  Don't want to build a habit of writing pointless test.  I believe this is a safe assumption.

*
